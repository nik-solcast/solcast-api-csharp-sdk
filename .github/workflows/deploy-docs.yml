# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Docs

on:
  workflow_run:
    workflows: ["Build and Test"]  # Name of the build workflow
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set Cache ID
        run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV

      - name: Cache MkDocs Material
        uses: actions/cache@v3
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          ln -s /root/.local/bin/poetry /usr/local/bin/poetry

      - name: Configure Poetry
        run: poetry config virtualenvs.create false

      - name: Install Dependencies
        run: poetry install --no-root --no-interaction --no-ansi --only=docs

      - name: Deploy to GitHub Pages
        env:
          JUPYTER_PLATFORM_DIRS: 1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdocs gh-deploy --force
